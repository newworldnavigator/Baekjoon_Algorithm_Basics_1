import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int repeat = Integer.parseInt(br.readLine());
		LinkedList<Integer> intDeque = new LinkedList<Integer>();
		StringBuilder sb = new StringBuilder();
		
		for (int i = 0; i < repeat; i ++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			String command = st.nextToken();
			if (command.equals("push_front")) {
				intDeque.addFirst(Integer.parseInt(st.nextToken()));
			} else if (command.equals("push_back")) {
				intDeque.addLast(Integer.parseInt(st.nextToken()));
			} else if (command.equals("pop_front")) {
				if (intDeque.isEmpty() == true) {
					sb.append(-1).append("\n");
				} else {
					sb.append(intDeque.removeFirst()).append("\n");
				}
			} else if (command.equals("pop_back")) {
				if (intDeque.isEmpty() == true) {
					sb.append(-1).append("\n");
				} else {
					sb.append(intDeque.removeLast()).append("\n");
				}
			} else if (command.equals("size")) {
				sb.append(intDeque.size()).append("\n");
			} else if (command.equals("empty")) {
				if (intDeque.isEmpty() == true) {
					sb.append(1).append("\n");
				} else {
					sb.append(0).append("\n");
				}
			} else if (command.equals("front")) {
				if (intDeque.isEmpty() == true) {
					sb.append(-1).append("\n");
				} else {
					sb.append(intDeque.peekFirst()).append("\n");
				}
			} else if (command.equals("back")) {
				if (intDeque.isEmpty() == true) {
					sb.append(-1).append("\n");
				} else {
					sb.append(intDeque.peekLast()).append("\n");
				}
			}
		}
		System.out.println(sb);
	}
}
